{"version":3,"sources":["components/Home/HomeAssets/background.png","components/Home/HomeAssets/Logo1.png","components/Home/HomeAssets/Logo2.png","components/Firebase/Firebase.js","components/Home/Home.js","components/NavBar/NavBar.js","components/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","Home","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","loginWithGoogle","auth","signInWithPopup","provider","then","result","credential","accessToken","user","console","log","catch","error","code","message","email","GoogleAuthProvider","addScope","useDeviceLanguage","state","showLoginOptions","onAuthStateChanged","setState","react_default","a","createElement","className","src","logo1","background","onClick","Component","NavBar","signOutUser","signOut","showSignOut","style","color","App","react","components_NavBar_NavBar","Switch","Route","path","exact","component","Redirect","to","Boolean","window","location","hostname","match","ReactDOM","render","BrowserRouter","components_App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.70973754.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/background.803b5b70.png\";","module.exports = __webpack_public_path__ + \"static/media/Logo1.dc125f8b.png\";","module.exports = __webpack_public_path__ + \"static/media/Logo2.e084672b.png\";","// Initialize Firebase\nimport firebase from \"firebase\";\n\nlet config = {\n    apiKey: \"AIzaSyCEHo1HuTtlsd3A0hexBEBeawB-FP2Mp_0\",\n    authDomain: \"ninetracks-80f47.firebaseapp.com\",\n    databaseURL: \"https://ninetracks-80f47.firebaseio.com\",\n    projectId: \"ninetracks-80f47\",\n    storageBucket: \"ninetracks-80f47.appspot.com\",\n    messagingSenderId: \"430266229821\"\n};\nfirebase.initializeApp(config);\nexport default firebase;","import React, {Component} from 'react';\nimport \"./Home.css\";\nimport background from \"./HomeAssets/background.png\"\nimport logo1 from \"./HomeAssets/Logo1.png\"\nimport logo2 from \"./HomeAssets/Logo2.png\"\nimport firebase from \"../Firebase/Firebase\"\n\nclass Home extends Component {\n\n    constructor(props) {\n        super(props);\n        this.provider = new firebase.auth.GoogleAuthProvider();\n        this.provider.addScope('https://www.googleapis.com/auth/contacts.readonly');\n        firebase.auth().useDeviceLanguage();\n        this.state = {\n            showLoginOptions: true\n        };\n        firebase.auth().onAuthStateChanged((user) => {\n            if (user) {\n                // User is signed in.\n                console.log(\"User is signed in\");\n                this.setState({showLoginOptions: false})\n            } else {\n                // No user is signed in.\n                this.setState({showLoginOptions: true})\n            }\n        });\n    }\n\n    loginWithGoogle = () => {\n        firebase.auth().signInWithPopup(this.provider).then((result) => {\n            // This gives you a Google Access Token. You can use it to access the Google API.\n            let token = result.credential.accessToken;\n            // The signed-in user info.\n            let user = result.user;\n            console.log(\"User logged in \");\n            // ...\n        }).catch(function (error) {\n            // Handle Errors here.\n            let errorCode = error.code;\n            let errorMessage = error.message;\n            // The email of the user's account used.\n            let email = error.email;\n            // The firebase.auth.AuthCredential type that was used.\n            let credential = error.credential;\n            // ...\n        });\n    };\n\n    render() {\n        return (\n            <div className=\"home\">\n                <div className=\"home-logo-container\">\n                    <img src={logo1}/>\n                </div>\n                <div className=\"home-background-container\">\n                    <img src={background}/>\n                    {this.state.showLoginOptions &&\n                    <div className=\"home-buttons-container\">\n                        <button className=\"material-button\" onClick={this.loginWithGoogle}>SIGN UP</button>\n                        <button className=\"material-button\" onClick={this.loginWithGoogle}>LOG IN</button>\n                    </div>\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Home;","import React, {Component} from 'react';\nimport \"./NavBar.css\";\nimport firebase from \"../Firebase/Firebase\";\n\nclass NavBar extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            showSignOut: false\n        };\n        firebase.auth().onAuthStateChanged((user) => {\n            if (user) {\n                // User is signed in.\n                this.setState({showSignOut: true})\n            } else {\n                // No user is signed in.\n                this.setState({showSignOut: false})\n            }\n        });\n    }\n\n    signOutUser = () => {\n        console.log(\"SIGNING OUT USER\");\n        firebase.auth().signOut().then(() => {\n            // Sign-out successful.\n            console.log(\"SIGN OUT SUCCESS\");\n        }).catch((error) => {\n            // An error happened.\n        });\n    };\n\n    render() {\n        return (\n            <div className=\"NavBar\">\n                <ul className=\"list-style\">\n                    <li>About</li>\n                    <li style={{color: \"black\"}}>/</li>\n                    <li>Contact Us</li>\n                    {this.state.showSignOut && <li className=\"right-side\">\n                        <button className=\"material-button\" onClick={this.signOutUser}>SIGN OUT</button>\n                    </li>}\n                </ul>\n            </div>\n        );\n    }\n}\n\nexport default NavBar;\n","import React, {Component, Fragment} from 'react';\nimport './App.css';\nimport {Redirect, Route, Switch} from \"react-router-dom\";\nimport Home from \"../Home/Home\";\nimport NavBar from \"../NavBar/NavBar\";\n\nclass App extends Component {\n    render() {\n        return (\n            <Fragment>\n                <NavBar/>\n                <Switch>\n                    <Route path=\"/\" exact component={Home}/>\n                    <Redirect to=\"/\"/>\n                </Switch>\n            </Fragment>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './ninetracks.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from \"react-router-dom\";\n\nReactDOM.render(<BrowserRouter><App/></BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}